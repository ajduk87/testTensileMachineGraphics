Aplikacija ukljucena        (1/2/2016 10:04:51 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:04 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:05 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:25 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:28 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:31 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:31 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:32 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:33 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:33 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:33 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:35 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:35 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:36 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:39 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:42 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:05:43 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:06:11 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:06:46 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:07:05 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:07:05 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:07:07 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:07:21 AM)
Aplikacija ukljucena        (1/2/2016 10:09:59 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:10:04 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:10:04 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:10:22 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:10:31 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:10:33 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:10:44 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:12:37 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:13:56 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:14:40 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:15:26 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:15:49 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:15:51 AM)
Aplikacija iskljucena        (1/2/2016 10:16:24 AM)
Aplikacija ukljucena        (1/2/2016 10:28:34 AM)
Aplikacija iskljucena        (1/2/2016 10:28:54 AM)
Aplikacija ukljucena        (1/2/2016 10:32:59 AM)
Aplikacija iskljucena        (1/2/2016 10:33:11 AM)
Aplikacija ukljucena        (1/2/2016 10:34:37 AM)
Aplikacija iskljucena        (1/2/2016 10:35:02 AM)
Aplikacija ukljucena        (1/2/2016 10:36:21 AM)
Aplikacija ukljucena        (1/2/2016 10:41:55 AM)
Aplikacija iskljucena        (1/2/2016 10:42:11 AM)
Aplikacija ukljucena        (1/2/2016 10:42:35 AM)
Aplikacija iskljucena        (1/2/2016 10:42:46 AM)
Aplikacija ukljucena        (1/2/2016 10:43:22 AM)
Aplikacija iskljucena        (1/2/2016 10:43:43 AM)
Aplikacija ukljucena        (1/2/2016 10:45:40 AM)
Aplikacija iskljucena        (1/2/2016 10:45:55 AM)
Aplikacija ukljucena        (1/2/2016 10:49:14 AM)
Aplikacija iskljucena        (1/2/2016 10:49:26 AM)
Aplikacija ukljucena        (1/2/2016 10:50:32 AM)
Aplikacija iskljucena        (1/2/2016 10:50:53 AM)
Aplikacija ukljucena        (1/2/2016 10:52:05 AM)
Aplikacija iskljucena        (1/2/2016 10:52:16 AM)
Aplikacija ukljucena        (1/2/2016 10:53:49 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:54:14 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:54:25 AM)
Aplikacija iskljucena        (1/2/2016 10:54:33 AM)
Aplikacija ukljucena        (1/2/2016 10:55:40 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:55:41 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:55:41 AM)
Aplikacija iskljucena        (1/2/2016 10:55:52 AM)
Aplikacija ukljucena        (1/2/2016 10:57:20 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:57:21 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:57:22 AM)
Aplikacija iskljucena        (1/2/2016 10:57:37 AM)
Aplikacija ukljucena        (1/2/2016 10:58:34 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:58:35 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:58:35 AM)
Aplikacija iskljucena        (1/2/2016 10:58:48 AM)
Aplikacija ukljucena        (1/2/2016 10:59:27 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:59:28 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 10:59:28 AM)
Aplikacija iskljucena        (1/2/2016 10:59:48 AM)
Aplikacija ukljucena        (1/2/2016 11:00:49 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:00:50 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:00:50 AM)
Aplikacija ukljucena        (1/2/2016 11:03:43 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:03:44 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:03:45 AM)
Aplikacija iskljucena        (1/2/2016 11:05:07 AM)
Aplikacija ukljucena        (1/2/2016 11:06:14 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:06:15 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:06:16 AM)
Aplikacija iskljucena        (1/2/2016 11:06:31 AM)
Aplikacija ukljucena        (1/2/2016 11:07:45 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:07:46 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:07:46 AM)
Aplikacija iskljucena        (1/2/2016 11:08:02 AM)
Aplikacija ukljucena        (1/2/2016 11:10:25 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:10:26 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:10:27 AM)
Aplikacija iskljucena        (1/2/2016 11:10:39 AM)
Aplikacija ukljucena        (1/2/2016 11:11:22 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:11:23 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:11:23 AM)
Aplikacija iskljucena        (1/2/2016 11:11:45 AM)
Aplikacija ukljucena        (1/2/2016 11:12:09 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:12:10 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:12:11 AM)
Aplikacija iskljucena        (1/2/2016 11:12:19 AM)
Aplikacija ukljucena        (1/2/2016 11:13:00 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:13:01 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:13:02 AM)
Aplikacija ukljucena        (1/2/2016 11:14:53 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:14:54 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:14:54 AM)
Aplikacija iskljucena        (1/2/2016 11:15:14 AM)
Aplikacija ukljucena        (1/2/2016 11:15:42 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:15:43 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:15:44 AM)
Aplikacija iskljucena        (1/2/2016 11:15:56 AM)
Aplikacija ukljucena        (1/2/2016 11:16:23 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:16:24 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:16:24 AM)
Aplikacija iskljucena        (1/2/2016 11:16:44 AM)
Aplikacija ukljucena        (1/2/2016 11:17:00 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:17:02 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:17:02 AM)
Aplikacija iskljucena        (1/2/2016 11:17:27 AM)
Aplikacija ukljucena        (1/2/2016 11:17:34 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:17:35 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:17:36 AM)
Aplikacija iskljucena        (1/2/2016 11:17:49 AM)
Aplikacija ukljucena        (1/2/2016 11:18:45 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:18:46 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:18:46 AM)
Aplikacija iskljucena        (1/2/2016 11:19:26 AM)
Aplikacija ukljucena        (1/2/2016 11:21:49 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:21:50 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:21:51 AM)
Aplikacija iskljucena        (1/2/2016 11:22:27 AM)
Aplikacija ukljucena        (1/2/2016 11:25:02 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:25:03 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:25:04 AM)
Aplikacija iskljucena        (1/2/2016 11:25:14 AM)
Aplikacija ukljucena        (1/2/2016 11:25:45 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:25:46 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:25:47 AM)
Aplikacija iskljucena        (1/2/2016 11:26:03 AM)
Aplikacija ukljucena        (1/2/2016 11:26:11 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:26:12 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:26:12 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:26:30 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:27:51 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:28:24 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:28:43 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:29:34 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:29:36 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:30:02 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:33:27 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:36:22 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:36:23 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:36:23 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:36:23 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:36:23 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:36:50 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:36:57 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:36:58 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:37:01 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:37:19 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:37:52 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:38:18 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:38:29 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:38:31 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:38:41 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:38:51 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:38:52 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:38:54 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:39:05 AM)
Aplikacija iskljucena        (1/2/2016 11:39:19 AM)
Aplikacija ukljucena        (1/2/2016 11:41:09 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:41:10 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:41:11 AM)
Aplikacija ukljucena        (1/2/2016 11:43:35 AM)
Aplikacija iskljucena        (1/2/2016 11:44:13 AM)
Aplikacija ukljucena        (1/2/2016 11:44:15 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:45:53 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:45:54 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:45:54 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:45:55 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:46:14 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/2/2016 11:46:36 AM)
Aplikacija iskljucena        (1/2/2016 11:49:53 AM)
Aplikacija ukljucena        (1/6/2016 11:49:47 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:49:59 PM)
Aplikacija iskljucena        (1/6/2016 11:50:10 PM)
Aplikacija ukljucena        (1/6/2016 11:50:55 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:50:56 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:50:57 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:51:02 PM)
Aplikacija iskljucena        (1/6/2016 11:51:11 PM)
Aplikacija ukljucena        (1/6/2016 11:52:33 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:52:34 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:52:34 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:52:40 PM)
Aplikacija iskljucena        (1/6/2016 11:52:49 PM)
Aplikacija ukljucena        (1/6/2016 11:56:37 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:56:38 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:56:39 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:56:44 PM)
Aplikacija iskljucena        (1/6/2016 11:56:51 PM)
Aplikacija ukljucena        (1/6/2016 11:57:06 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:57:07 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:57:08 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:57:12 PM)
Aplikacija iskljucena        (1/6/2016 11:57:15 PM)
Aplikacija ukljucena        (1/6/2016 11:57:23 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:57:24 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:57:24 PM)
Aplikacija iskljucena        (1/6/2016 11:57:26 PM)
Aplikacija ukljucena        (1/6/2016 11:57:35 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:57:37 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:57:38 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/6/2016 11:57:41 PM)
Aplikacija iskljucena        (1/6/2016 11:57:49 PM)
Aplikacija ukljucena        (1/7/2016 12:00:14 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:00:15 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:00:15 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:00:20 AM)
Aplikacija iskljucena        (1/7/2016 12:00:30 AM)
Aplikacija ukljucena        (1/7/2016 12:01:41 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:01:42 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:01:42 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:01:48 AM)
Aplikacija iskljucena        (1/7/2016 12:01:58 AM)
Aplikacija ukljucena        (1/7/2016 12:02:25 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:02:26 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:02:27 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:02:31 AM)
Aplikacija iskljucena        (1/7/2016 12:02:34 AM)
Aplikacija ukljucena        (1/7/2016 12:03:09 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:03:10 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:03:10 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:03:15 AM)
Aplikacija iskljucena        (1/7/2016 12:03:22 AM)
Aplikacija ukljucena        (1/7/2016 12:05:39 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:05:41 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:05:41 AM)
Aplikacija iskljucena        (1/7/2016 12:05:42 AM)
Aplikacija ukljucena        (1/7/2016 12:05:49 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:05:50 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:05:50 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:05:55 AM)
Aplikacija iskljucena        (1/7/2016 12:06:16 AM)
Aplikacija ukljucena        (1/7/2016 12:07:11 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:07:12 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:07:13 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:07:19 AM)
Aplikacija iskljucena        (1/7/2016 12:07:30 AM)
Aplikacija ukljucena        (1/7/2016 12:07:52 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:07:53 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:07:54 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:07:59 AM)
Aplikacija iskljucena        (1/7/2016 12:08:35 AM)
Aplikacija ukljucena        (1/7/2016 12:10:27 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:10:29 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:10:29 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:10:35 AM)
Aplikacija iskljucena        (1/7/2016 12:10:57 AM)
Aplikacija ukljucena        (1/7/2016 12:11:50 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:11:51 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/7/2016 12:11:52 AM)
Aplikacija iskljucena        (1/7/2016 12:12:07 AM)
Aplikacija ukljucena        (1/9/2016 9:01:38 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/9/2016 9:01:43 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/9/2016 9:01:43 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/9/2016 9:03:16 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/9/2016 9:03:28 AM)
Aplikacija iskljucena        (1/9/2016 9:04:09 AM)
Aplikacija ukljucena        (1/9/2016 10:37:32 AM)
Aplikacija iskljucena        (1/9/2016 10:38:00 AM)
Aplikacija ukljucena        (1/9/2016 10:38:22 AM)
Aplikacija ukljucena        (1/9/2016 10:39:59 AM)
Aplikacija ukljucena        (1/9/2016 10:41:01 AM)
Aplikacija iskljucena        (1/9/2016 10:42:14 AM)
Aplikacija ukljucena        (1/9/2016 10:42:41 AM)
Aplikacija iskljucena        (1/9/2016 10:43:11 AM)
Aplikacija ukljucena        (1/9/2016 10:43:23 AM)
Aplikacija iskljucena        (1/9/2016 10:43:43 AM)
Aplikacija ukljucena        (1/9/2016 10:44:56 AM)
Aplikacija iskljucena        (1/9/2016 10:51:49 AM)
Aplikacija ukljucena        (1/9/2016 11:00:54 AM)
Aplikacija iskljucena        (1/9/2016 11:03:52 AM)
Aplikacija ukljucena        (1/9/2016 11:04:56 AM)
Aplikacija iskljucena        (1/9/2016 11:05:11 AM)
Aplikacija ukljucena        (1/9/2016 11:05:26 AM)
Aplikacija iskljucena        (1/9/2016 11:06:10 AM)
Aplikacija ukljucena        (1/9/2016 11:06:21 AM)
Aplikacija iskljucena        (1/9/2016 11:06:34 AM)
Aplikacija ukljucena        (1/9/2016 11:06:46 AM)
Aplikacija iskljucena        (1/9/2016 11:07:21 AM)
Aplikacija ukljucena        (1/9/2016 11:09:09 AM)
Aplikacija iskljucena        (1/9/2016 11:10:07 AM)
Aplikacija ukljucena        (1/9/2016 11:11:01 AM)
Aplikacija iskljucena        (1/9/2016 11:13:37 AM)
Aplikacija ukljucena        (1/9/2016 11:13:40 AM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/9/2016 11:16:52 AM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/9/2016 11:17:38 AM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/9/2016 11:17:47 AM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/9/2016 11:17:53 AM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/9/2016 11:17:55 AM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/9/2016 11:24:12 AM)
Aplikacija iskljucena        (1/9/2016 11:25:43 AM)
Aplikacija ukljucena        (1/16/2016 6:54:24 PM)
Aplikacija iskljucena        (1/16/2016 6:55:37 PM)
Aplikacija ukljucena        (1/16/2016 6:55:41 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 6:55:43 PM)
Aplikacija iskljucena        (1/16/2016 6:56:19 PM)
Aplikacija ukljucena        (1/16/2016 6:56:22 PM)
Aplikacija iskljucena        (1/16/2016 6:56:48 PM)
Aplikacija ukljucena        (1/16/2016 6:56:50 PM)
Aplikacija iskljucena        (1/16/2016 6:57:53 PM)
Aplikacija ukljucena        (1/16/2016 6:57:55 PM)
Aplikacija iskljucena        (1/16/2016 6:58:52 PM)
Aplikacija ukljucena        (1/16/2016 7:01:15 PM)
Aplikacija iskljucena        (1/16/2016 7:01:59 PM)
Aplikacija ukljucena        (1/16/2016 7:06:47 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:07:21 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:07:21 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:07:21 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:07:21 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:07:22 PM)
Aplikacija iskljucena        (1/16/2016 7:07:27 PM)
Aplikacija ukljucena        (1/16/2016 7:07:46 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:07:47 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:07:47 PM)
Aplikacija iskljucena        (1/16/2016 7:08:19 PM)
Aplikacija ukljucena        (1/16/2016 7:16:40 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:16:42 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:16:42 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:17:11 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:17:12 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:17:12 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:17:12 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:17:12 PM)
Aplikacija iskljucena        (1/16/2016 7:17:26 PM)
Aplikacija ukljucena        (1/16/2016 7:31:52 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:31:53 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:31:56 PM)
Aplikacija iskljucena        (1/16/2016 7:32:11 PM)
Aplikacija ukljucena        (1/16/2016 7:33:04 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:33:06 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:33:08 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:33:38 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:33:38 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:33:40 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:33:40 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:33:40 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:33:50 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:33:50 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/16/2016 7:33:57 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/16/2016 7:35:02 PM)
Aplikacija iskljucena        (1/16/2016 7:35:14 PM)
Aplikacija ukljucena        (1/17/2016 6:59:52 PM)
Aplikacija iskljucena        (1/17/2016 7:00:13 PM)
Aplikacija ukljucena        (1/17/2016 7:01:33 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:05:13 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:05:18 PM)
Aplikacija iskljucena        (1/17/2016 7:06:30 PM)
Aplikacija ukljucena        (1/17/2016 7:06:32 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:06:35 PM)
Aplikacija iskljucena        (1/17/2016 7:06:44 PM)
Aplikacija ukljucena        (1/17/2016 7:08:09 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:08:14 PM)
Aplikacija iskljucena        (1/17/2016 7:09:28 PM)
Aplikacija ukljucena        (1/17/2016 7:10:07 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:10:12 PM)
Aplikacija iskljucena        (1/17/2016 7:10:47 PM)
Aplikacija ukljucena        (1/17/2016 7:12:12 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:12:16 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:13:28 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:13:29 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:13:30 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:13:31 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:13:31 PM)
Aplikacija iskljucena        (1/17/2016 7:14:20 PM)
Aplikacija ukljucena        (1/17/2016 7:14:23 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:14:55 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 7:19:17 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 7:19:18 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 7:19:29 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:20:19 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:21:06 PM)
Aplikacija iskljucena        (1/17/2016 7:22:42 PM)
Aplikacija ukljucena        (1/17/2016 7:22:52 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:23:02 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 7:24:02 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:24:46 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:24:48 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:24:49 PM)
Aplikacija iskljucena        (1/17/2016 7:25:03 PM)
Aplikacija ukljucena        (1/17/2016 7:25:09 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:25:17 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:25:35 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:29:42 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:29:56 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:30:09 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:30:15 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:32:26 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:33:31 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:33:39 PM)
Aplikacija iskljucena        (1/17/2016 7:36:25 PM)
Aplikacija ukljucena        (1/17/2016 7:37:58 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:38:01 PM)
Aplikacija iskljucena        (1/17/2016 7:38:06 PM)
Aplikacija ukljucena        (1/17/2016 7:38:45 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:38:58 PM)
Aplikacija iskljucena        (1/17/2016 7:39:03 PM)
Aplikacija ukljucena        (1/17/2016 7:39:31 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:39:46 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:40:25 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:40:25 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:40:25 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:40:26 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:40:26 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 7:41:25 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 7:42:51 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 7:42:57 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 7:42:57 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 7:43:27 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:44:13 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:44:13 PM)
Aplikacija iskljucena        (1/17/2016 7:45:28 PM)
Aplikacija ukljucena        (1/17/2016 7:46:56 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:46:58 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:47:24 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:47:24 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:48:36 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:48:36 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 7:49:34 PM)
Aplikacija iskljucena        (1/17/2016 7:49:44 PM)
Aplikacija ukljucena        (1/17/2016 7:50:54 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:50:55 PM)
Aplikacija iskljucena        (1/17/2016 7:51:31 PM)
Aplikacija ukljucena        (1/17/2016 7:56:27 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:56:28 PM)
Aplikacija iskljucena        (1/17/2016 7:58:20 PM)
Aplikacija ukljucena        (1/17/2016 7:58:42 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 7:58:43 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:00:39 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:01:04 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:01:04 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:01:13 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:01:15 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:01:48 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:01:48 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:01:49 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:01:49 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:01:49 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:03:05 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:03:06 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:03:06 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:03:06 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:03:06 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:04:57 PM)
[private void setRp02PointCalculated(int indexOfRp02, double x, double y) ]{if (indexOfRp02 == dataReader.FittingPreassureInMPa.Count)}        (1/17/2016 8:05:55 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:06:51 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:07:00 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:07:00 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:07:07 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:07:07 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:07:11 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:07:12 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:08:30 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:08:31 PM)
Aplikacija iskljucena        (1/17/2016 8:10:01 PM)
Aplikacija ukljucena        (1/17/2016 8:14:37 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:14:38 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:15:07 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:15:09 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:15:31 PM)
Aplikacija ukljucena        (1/17/2016 8:16:02 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:16:03 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:16:25 PM)
Aplikacija ukljucena        (1/17/2016 8:16:33 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:16:34 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:16:38 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:16:42 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:17:28 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:18:39 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:18:39 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:18:58 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:18:58 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:18:58 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:18:59 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:18:59 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:20:57 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:20:57 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:20:57 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:20:57 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:20:58 PM)
Aplikacija iskljucena        (1/17/2016 8:21:15 PM)
Aplikacija ukljucena        (1/17/2016 8:33:14 PM)
Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index  {drawFittingGraphic()}        (1/17/2016 8:33:16 PM)
Aplikacija iskljucena        (1/17/2016 8:33:25 PM)
